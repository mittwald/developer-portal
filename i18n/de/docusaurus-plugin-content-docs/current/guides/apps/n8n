# MariaDB ausführen

## Einführung

n8n ist eine Open-Source-Automatisierungsplattform, mit der sich verschiedene Dienste und Anwendungen über sogenannte Workflows miteinander verbinden lassen. Sie funktioniert ähnlich wie Tools wie Zapier oder Make (ehemals Integromat), bietet aber mehr Flexibilität und Kontrolle – besonders für Entwickler:innen.

Mit n8n kannst du:

- Automatisierte Abläufe zwischen über 300+ Diensten (z. B. Slack, Google Sheets, GitHub, Datenbanken etc.) erstellen.

- Eigene Logik einbauen – z. B. mit Bedingungen, Schleifen, benutzerdefiniertem JavaScript.

- Die Software selbst hosten (Self-Hosting), was volle Datenhoheit ermöglicht.

## n8n Container erstellen

Du kannst eine n8n in deiner mittwald Hosting-Umgebung mit Containern bereitstellen. Es gibt verschiedene Hauptansätze:


### Verwendung der mStudio-Benutzeroberfläche

1. Gehe in deinem Projekt in mStudio auf den **Container**-Menüpunkt und erstelle einen neuen Container. Du kannst einen beliebigen Namen wählen.

2. Gib das Image `n8nio/n8n:latest` ein. Du kannst den Entrypoint und das Command wie vorgeschlagen beibehalten.

#### Volumes

Um die Daten deines n8n persistent zu speichern, definiere Volumes unter **Volumes** wie folgt:

- Neues Volume erstellen, auf **Pfad im Container** (Mount Point): `/root/.n8n` 


#### Umgebungsvariablen

Setze die folgenden Umgebungsvariablen für den Container:

```dotenv
N8N_HOST=p-dqyafd.project.space
N8N_PORT=5678
N8N_PROTOCOL=https
NODE_ENV=production
WEBHOOK_URL=https://p-dqyafd.project.space/
GENERIC_TIMEZONE=Europe/Berlin
```

Hier passt du die Umgebungsvariablen `N8N_HOST` und `WEBHOOK_URL` auf den Host an, über den du die Weboberfläche von n8n erreichen möchtest.

#### Ports

Übernehme den vorgeschlagenen Standardport `5687`.

### Verwendung der CLI mit `mw container run`

Du kannst auch einen PostgreSQL-Container mit der mittwald CLI und dem Befehl `mw container run` bereitstellen:

```bash
mw container run \
  --name n8n \
  --env N8N_HOST=p-dqyafd.project.space \
  --env N8N_PORT=5678 \
  --env N8N_PROTOCOL=https \
  --env NODE_ENV=production \
  --env WEBHOOK_URL=https://p-dqyafd.project.space/ \
  --env GENERIC_TIMEZONE=Europe/Berlin \  
  --volume n8n-data:/root/.n8n \
  --publish 5687:5687/tcp \
  --create-volumes \
  n8nio/n8n:latest
```

Dieser Befehl erstellt einen neuen Container namens "n8n" mit dem n8n-Image, setzt alle notwendigen Umgebungsvariablen und mountet Volumes für die persistente Datenspeicherung.

### Verwendung der CLI mit `mw stack deploy`

Wenn du Docker Compose bevorzugst, kannst du eine `docker-compose.yml`-Datei erstellen und sie mit dem Befehl `mw stack deploy` bereitstellen:

1. Erstelle eine `docker-compose.yml`-Datei mit folgendem Inhalt:

   ```yaml
   version: "3"
   services:
     mariadb:
       image: n8nio/n8n:latest
       environment:
            -N8N_HOST=p-dqyafd.project.space
            - N8N_PORT=5678
            - N8N_PROTOCOL=https
            - NODE_ENV=production
            - WEBHOOK_URL=https://p-dqyafd.project.space/
            - GENERIC_TIMEZONE=Europe/Berlin
       ports:
         - "5687:5687"
       volumes:
         - n8n_data:/root/.n8n
   volumes:
     n8n_data:
   ```

2. Stelle den Stack mit der CLI bereit:

   ```bash
   mw stack deploy
   ```

Dieser Ansatz ist besonders nützlich, wenn du mehrere Container deployen möchtest, die zusammenarbeiten.

## Betrieb

Deine n8n-Daten werden im Rahmen des regelmäßigen Projektbackups gesichert und entsprechend auch wiederhergestellt werden.
